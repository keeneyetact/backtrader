#!/usr/bin/env python
# -*- coding: utf-8; py-indent-offset:4 -*-
###############################################################################
#
# Copyright (C) 2015 Daniel Rodriguez
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
from __future__ import (absolute_import, division, print_function,
                        unicode_literals)

import math

from six.moves import xrange

from backtrader import Indicator


class OperationN(Indicator):
    '''OperationN

    Calculates "func" for a given period

    Serves as a base for classes that work with a period and can express the
    logic in a callable object

    Note:
      Base classes must provide a "func" attribute which is a callable

    Formula:
      - line = func(data, period)

    See:
      (None)

    Lines:
      - (None) to be defined by base classes

    Params:
      - period (1): period for the operation
    '''
    params = (('period', 1),)

    def __init__(self):
        self.addminperiod(self.p.period)

    def next(self):
        self.line[0] = self.func(self.data.get(size=self.p.period))

    def once(self, start, end):
        dst = self.line.array
        src = self.data.array
        period = self.p.period
        func = self.func

        for i in xrange(start, end):
            dst[i] = func(src[i - period + 1: i + 1])


class Highest(OperationN):
    '''Highest

    Calculates the highest value for the data in a given period

    Formula:
      - highest = max(data, period)

    See:
      (None)

    Lines:
      - highest

    Params:
      - period (1): period for the operation
    '''
    lines = ('highest',)
    func = max


class Lowest(OperationN):
    '''Lowest

    Calculates the lowest value for the data in a given period

    Formula:
      - lowest = min(data, period)

    See:
      (None)

    Lines:
      - lowest

    Params:
      - period (1): period for the operation
    '''
    lines = ('lowest',)
    func = min


class SumN(OperationN):
    '''SumN

    Calculates the Sum of the data values over a given period

    Formula:
      - sumn = sum(data, period)

    See:
      (None)

    Lines:
      - sumn

    Params:
      - period (1): period for the operation
    '''
    lines = ('sumn',)
    func = math.fsum


class FindFirstIndex(OperationN):
    '''FindFirstIndex

    Returns the 1st index of the data that satisfies equality with the
    condition generated by the parameter _evalfunc

    Note:
      Returned indexes look backwards. 0 is the current index and 1 is
      the previous bar.

    Formula:
      - index = first for which data[index] == _evalfunc(data)

    See:
      (None)

    Lines:
      - index

    Params:
      - period (1): period for the operation
      - _evalfunc (None): func which sets the condition a data must meet
    '''
    lines = ('index',)
    params = (('_evalfunc', None),)

    def func(self, iterable):
        m = self.p._evalfunc(iterable)
        return next(i for i, v in enumerate(reversed(iterable)) if v == m)


class FindFirstIndexHighest(FindFirstIndex):
    '''FindFirstIndexHighest

    Returns the index of the 1st data that is the highest in the period

    Note:
      Returned indexes look backwards. 0 is the current index and 1 is
      the previous bar.

    See:
      (None)

    Lines:
      - index

    Params:
      - period (1): period for the operation
    '''
    params = (('_evalfunc', max),)


class FindFirstIndexLowest(FindFirstIndex):
    '''FindFirstIndexHighest

    Returns the index of the 1st data that is the lowest in the period

    Note:
      Returned indexes look backwards. 0 is the current index and 1 is
      the previous bar.

    See:
      (None)

    Lines:
      - index

    Params:
      - period (1): period for the operation
    '''
    params = (('_evalfunc', min),)


class FindLastIndex(OperationN):
    '''FindLastIndex

    Returns the index of the last data that satisfies equality with the
    condition generated by the parameter _evalfunc

    Note:
      Returned indexes look backwards. 0 is the current index and 1 is
      the previous bar.

    Formula:
      - index = last for which data[index] == _evalfunc(data)

    See:
      (None)

    Lines:
      - index

    Params:
      - period (1): period for the operation
      - _evalfunc (None): func which sets the condition a data must meet
    '''
    lines = ('index',)
    params = (('_evalfunc', None),)

    def func(self, iterable):
        m = self.p._evalfunc(iterable)
        index = next(i for i, v in enumerate(iterable) if v == m)
        # The iterable goes from 0 -> period - 1. If the last element
        # which is the current bar is returned and without the -1 then
        # period - index = 1 ... and must be zero!
        return self.p.period - index - 1


class FindLastIndexHighest(FindLastIndex):
    '''FindLastIndexHighest

    Returns the index of the last data that is the highest in the period

    Note:
      Returned indexes look backwards. 0 is the current index and 1 is
      the previous bar.

    Formula:
      - index = last for which data[index] == _evalfunc(data)

    See:
      (None)

    Lines:
      - index

    Params:
      - period (1): period for the operation
    '''
    params = (('_evalfunc', max),)


class FindLastIndexLowest(FindLastIndex):
    '''FindLastIndexLowest

    Returns the index of the last data that is the lowest in the period

    Note:
      Returned indexes look backwards. 0 is the current index and 1 is
      the previous bar.

    Formula:
      - index = last for which data[index] == _evalfunc(data)

    See:
      (None)

    Lines:
      - index

    Params:
      - period (1): period for the operation
    '''
    params = (('_evalfunc', min),)
